
const path = require('path');
const Buffer = require('buffer').Buffer;

const webpack = require('webpack');
const ExtractTextPlugin = require( 'extract-text-webpack-plugin' );
const MinifyPlugin = require( 'babel-minify-webpack-plugin' );
const CopyWebpackPlugin = require( 'copy-webpack-plugin' );

const SVGO = require( 'svgo' );


const PROD = process.env.NODE_ENV === 'production';


const extractSass = new ExtractTextPlugin({
    filename: `./static/style/[name]${ PROD ? '.[contenthash:20]' : '' }.css`,
    disable: false
});

const svgToPartial = new CopyWebpackPlugin(
    [
        {
            from: './**/*.svg',
            to: './layouts/partials/svgs/[path][name].html',
            ignore: [],
            flatten: false,
            transform: function( contents, filePath ){
                
                var fileContentsString = contents.toString();
                
                var baseParts = path.basename( filePath ).split('.');
                var filename = baseParts.join('.');
                
                try{
                    var svgo = new SVGO({
                        full: true,
                        js2svg: {
                            regValEntities: null,
                            pretty: true
                        },
                        plugins: [
                            {
                                cleanupIDs: {
                                    prefix: filename + '_'
                                }
                            },
                            {
                                hugoPartial: {
                                    name: 'hugoPartial',
                                    description: 'adding some Hugo template syntax',
                                    type: 'perItem',
                                    active: true,
                                    params: {
                                        classes: '{{ delimit ( default (slice) .classes ) " " }}'
                                    },
                                    fn: function addHugoSyntax( item, params ){
                                        var classValue = params.classes;
                                        
                                        if( item.isElem('svg') ){
                                            item.class.add( classValue );
                                        }
        
                                        return item;
                                    }
                                }
                            }
                        ]
                    });
                }
                catch( ex ){
                    return Promise.reject( new Error( ex.message ) );
                }
                
        
                return svgo.optimize( fileContentsString ).then(function( result ){
                    if( typeof result === 'object' && typeof result.error !== 'undefined' && result.error !== null ){
                        return Promise.reject( new Error( result.error ) );
                    }
        
                    if( typeof result === 'undefined' || result === null || typeof result.data !== 'string' ){
                        return Promise.reject( new Error( 'unintended result from SVGO' ) );
                    }
        
                    var transformedSvgString = result.data;
                    return Promise.resolve( Buffer.from( transformedSvgString ) );
                }); 
            }
        }
    ],
    {
        copyUnmodified: false,
        context: path.resolve( __dirname, './app/svgs' ),
    }
);



module.exports = {
    
    target: 'web',
    
    entry: { 
        main: [
            './app/js/main.js',
            './app/styling/main.scss'
        ]
    },
    
    devtool:  PROD ? false : 'source-map',
    
    output: {        
        path: path.resolve( __dirname, 'app' ),
        filename: `./static/script/[name]${ PROD ? '.[hash:20]' : '' }.js`,
    },
    
    module: {
        rules: [
            {                 
                test: /\.js$/,
                include: [ 
                    path.resolve( __dirname, 'app/js/' )
                ],
                exclude: /node_modules/,
                use: {
                    loader: 'babel-loader'
                }
            },
            
            {
                test: /\.scss/,
                enforce: 'pre',
                loader: 'import-glob-loader',
            },
            
            {
                test: /\.scss$/,
                use: extractSass.extract({
                    use: [
                        { loader: 'raw-loader' },
                        {
                            loader: 'sass-loader',
                            
                            options: {
//                                includePaths: [
//                                    path.resolve(__dirname, './app/styles/' )
//                                ],
                                sourceMap: PROD === false,
                                outputStyle: PROD ? 'compressed' : 'expanded'
                            }
                        }
                    ]
                })
            }
        ]
    },
    
    plugins: [
        extractSass,
        svgToPartial
    ].concat( PROD ? [ new MinifyPlugin() ] : [] )
    
};
